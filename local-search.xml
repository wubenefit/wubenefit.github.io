<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>白嫖Google无限空间</title>
    <link href="/2022/06/07/%E7%99%BD%E5%AB%96Google%E6%97%A0%E9%99%90%E7%A9%BA%E9%97%B4/"/>
    <url>/2022/06/07/%E7%99%BD%E5%AB%96Google%E6%97%A0%E9%99%90%E7%A9%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h3 id="Google-硬盘以前是无限空间的，后面被人嫖怕了，就改成了15G空间，今天就教大家一种嫖无限空间的办法"><a href="#Google-硬盘以前是无限空间的，后面被人嫖怕了，就改成了15G空间，今天就教大家一种嫖无限空间的办法" class="headerlink" title="Google 硬盘以前是无限空间的，后面被人嫖怕了，就改成了15G空间，今天就教大家一种嫖无限空间的办法"></a>Google 硬盘以前是无限空间的，后面被人嫖怕了，就改成了15G空间，今天就教大家一种嫖无限空间的办法</h3><ol><li>打开你的浏览器登陆Google云端硬盘</li><li>新窗口登录 <a href="https://td.msgsuite.workers.dev/">https://td.msgsuite.workers.dev</a></li><li>输入共享盘名称和gmail，学校默认即可</li><li>验证，然后创建。提示成功即可，不成功换学校换随机吧。我就是这样滴</li><li>刷新谷歌云端硬盘页面，会出现“共享云端硬盘”，这个共享盘就是无限空间的！</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wubenefit/img/202206080018382.jpg" alt="创建成功"></p><h2 id="这个创建的共享网盘就不要放那些珍贵的数据了。不知道他什么时候删除"><a href="#这个创建的共享网盘就不要放那些珍贵的数据了。不知道他什么时候删除" class="headerlink" title="这个创建的共享网盘就不要放那些珍贵的数据了。不知道他什么时候删除"></a>这个创建的共享网盘就不要放那些珍贵的数据了。不知道他什么时候删除</h2>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>空间</tag>
      
      <tag>Google</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Padavan通过socat实现公网ipv6转发内网ipv4</title>
    <link href="/2022/05/18/Padavan%E9%80%9A%E8%BF%87socat%E5%AE%9E%E7%8E%B0%E5%85%AC%E7%BD%91ipv6%E8%BD%AC%E5%8F%91%E5%86%85%E7%BD%91ipv4/"/>
    <url>/2022/05/18/Padavan%E9%80%9A%E8%BF%87socat%E5%AE%9E%E7%8E%B0%E5%85%AC%E7%BD%91ipv6%E8%BD%AC%E5%8F%91%E5%86%85%E7%BD%91ipv4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文作者：Seeker<br>原文地址：<a href="http://www.yizu.org/archives/786/">http://www.yizu.org/archives/786/</a></p></blockquote><h5 id="在没有公网IP的情况下，我们会采用内网穿透的方式访问内网，比如frp，但是这种方式需要一台公网服务器，而且速度受到这台服务器带宽的限制，体验可能很一般。但是如果我们有公网ipv6地址，就可直接访问家里设备了。如果你的路由器有IPv6地址，而内网设备因为种种原因没有IPv6，但需要公网访问，可以使用socat来进行转发"><a href="#在没有公网IP的情况下，我们会采用内网穿透的方式访问内网，比如frp，但是这种方式需要一台公网服务器，而且速度受到这台服务器带宽的限制，体验可能很一般。但是如果我们有公网ipv6地址，就可直接访问家里设备了。如果你的路由器有IPv6地址，而内网设备因为种种原因没有IPv6，但需要公网访问，可以使用socat来进行转发" class="headerlink" title="在没有公网IP的情况下，我们会采用内网穿透的方式访问内网，比如frp，但是这种方式需要一台公网服务器，而且速度受到这台服务器带宽的限制，体验可能很一般。但是如果我们有公网ipv6地址，就可直接访问家里设备了。如果你的路由器有IPv6地址，而内网设备因为种种原因没有IPv6，但需要公网访问，可以使用socat来进行转发"></a>在没有公网IP的情况下，我们会采用内网穿透的方式访问内网，比如frp，但是这种方式需要一台公网服务器，而且速度受到这台服务器带宽的限制，体验可能很一般。但是如果我们有公网ipv6地址，就可直接访问家里设备了。如果你的路由器有IPv6地址，而内网设备因为种种原因没有IPv6，但需要公网访问，可以使用socat来进行转发</h5><p>这里介绍Padavan下的配置，openwrt系统类似。<br>首先通过socat -h命令看一下你的路由器有没有安装socat,如果没有安装则先安装socat</p><blockquote><p>opkg update<br>opkg install socat</p></blockquote><h5 id="在“高级设置”-“参数设置”-“脚本”找到“在防火墙规则启动后执行-”，输入以下脚本"><a href="#在“高级设置”-“参数设置”-“脚本”找到“在防火墙规则启动后执行-”，输入以下脚本" class="headerlink" title="在“高级设置”-“参数设置”-“脚本”找到“在防火墙规则启动后执行:”，输入以下脚本"></a>在“高级设置”-“参数设置”-“脚本”找到“在防火墙规则启动后执行:”，输入以下脚本</h5><blockquote><p>#设置防火墙，开放3322端口<br>ip6tables -A INPUT -p tcp –dport 3322 -j ACCEPT<br>ip6tables -A OUTPUT -p tcp –dport 3322 -j ACCEPT<br>ip6tables -A INPUT -p udp –dport 3322 -j ACCEPT<br>ip6tables -A OUTPUT -p udp –dport 3322 -j ACCEPT<br>#设置socat<br>nohup socat TCP6-LISTEN:3322,reuseaddr,fork TCP4:192.168.1.2:22 &amp;<br>nohup socat UDP6-LISTEN:3322,reuseaddr,fork UDP4:192.168.1.2:22 &amp;</p></blockquote><h5 id="应用设置后即可。这段代码可以实现通过访问“-路由器ipv6地址-3322”-达到公网访问“192-168-1-2-22”的目的"><a href="#应用设置后即可。这段代码可以实现通过访问“-路由器ipv6地址-3322”-达到公网访问“192-168-1-2-22”的目的" class="headerlink" title="应用设置后即可。这段代码可以实现通过访问“[路由器ipv6地址]:3322”,达到公网访问“192.168.1.2:22”的目的"></a>应用设置后即可。这段代码可以实现通过访问“[路由器ipv6地址]:3322”,达到公网访问“192.168.1.2:22”的目的</h5>]]></content>
    
    
    
    <tags>
      
      <tag>技巧</tag>
      
      <tag>公网</tag>
      
      <tag>路由器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/18/hello-world/"/>
    <url>/2022/05/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>功能增强</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>QQ切换深色主题</title>
    <link href="/2022/04/18/QQ%E5%88%87%E6%8D%A2%E6%B7%B1%E8%89%B2%E4%B8%BB%E9%A2%98/"/>
    <url>/2022/04/18/QQ%E5%88%87%E6%8D%A2%E6%B7%B1%E8%89%B2%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="🧐-QQ不能切换到深色模式，我一直在网上找资料，然后找到了这位-杠就拉黑-之后我手机是Android12版本的，不能使用。我就在酷安上面寻找可以使用在Android12的-httpcanary-软件，之后找到这位的-我无聊了-的文件。"><a href="#🧐-QQ不能切换到深色模式，我一直在网上找资料，然后找到了这位-杠就拉黑-之后我手机是Android12版本的，不能使用。我就在酷安上面寻找可以使用在Android12的-httpcanary-软件，之后找到这位的-我无聊了-的文件。" class="headerlink" title="🧐 QQ不能切换到深色模式，我一直在网上找资料，然后找到了这位 杠就拉黑  之后我手机是Android12版本的，不能使用。我就在酷安上面寻找可以使用在Android12的 httpcanary 软件，之后找到这位的 我无聊了 的文件。"></a>🧐 QQ不能切换到深色模式，我一直在网上找资料，然后找到了这位 <a href="https://www.coolapk.com/feed/32946253?shareKey=YzJkZTA1NTFkNGE2NjI1ZDIxMzc">杠就拉黑</a>  之后我手机是Android12版本的，不能使用。我就在酷安上面寻找可以使用在Android12的 <code>httpcanary</code> 软件，之后找到这位的 <a href="https://www.coolapk.com/feed/34705000?shareKey=ZDIwYWRkZjBlZDc1NjI1ZDIxNTg">我无聊了</a> 的文件。</h2><h2 id="你们可以从他们两位那里下载，也可以到我这里下载-文件-密码是：9utz"><a href="#你们可以从他们两位那里下载，也可以到我这里下载-文件-密码是：9utz" class="headerlink" title="你们可以从他们两位那里下载，也可以到我这里下载 文件  密码是：9utz"></a>你们可以从他们两位那里下载，也可以到我这里下载 <a href="https://wwc.lanzouh.com/b036wy7fi">文件</a>  密码是：9utz</h2><h2 id="我的QQ版本是Play8-2-11版本的。应该是可以通用的。"><a href="#我的QQ版本是Play8-2-11版本的。应该是可以通用的。" class="headerlink" title="我的QQ版本是Play8.2.11版本的。应该是可以通用的。"></a>我的QQ版本是Play8.2.11版本的。应该是可以通用的。</h2><h1 id="🛠️-操作步骤"><a href="#🛠️-操作步骤" class="headerlink" title="🛠️ 操作步骤"></a>🛠️ 操作步骤</h1><h2 id="httpcanary配置为目标应用QQ"><a href="#httpcanary配置为目标应用QQ" class="headerlink" title="httpcanary配置为目标应用QQ"></a>httpcanary配置为目标应用QQ</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181806572.png"><br><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181806115.png"></p><h2 id="打开QQ"><a href="#打开QQ" class="headerlink" title="打开QQ"></a>打开QQ</h2><h2 id="进入httpcanary里面"><a href="#进入httpcanary里面" class="headerlink" title="进入httpcanary里面"></a>进入httpcanary里面</h2><h2 id="然后启动抓包"><a href="#然后启动抓包" class="headerlink" title="然后启动抓包"></a>然后启动抓包</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181749630.png"></p><h2 id="然后点击抓到的那个链接"><a href="#然后点击抓到的那个链接" class="headerlink" title="然后点击抓到的那个链接"></a>然后点击抓到的那个链接</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181751940.png"></p><h2 id="然后复制那个地址到浏览器下载，随便那个浏览器都行"><a href="#然后复制那个地址到浏览器下载，随便那个浏览器都行" class="headerlink" title="然后复制那个地址到浏览器下载，随便那个浏览器都行"></a>然后复制那个地址到浏览器下载，随便那个浏览器都行</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181752974.png"></p><h2 id="然后按住抓到那个地址，出现这个界面"><a href="#然后按住抓到那个地址，出现这个界面" class="headerlink" title="然后按住抓到那个地址，出现这个界面"></a>然后按住抓到那个地址，出现这个界面</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181752996.png"></p><h2 id="之后点击那个重写"><a href="#之后点击那个重写" class="headerlink" title="之后点击那个重写"></a>之后点击那个重写</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181753534.png"></p><h2 id="这个就是修改名字的，随便填。"><a href="#这个就是修改名字的，随便填。" class="headerlink" title="这个就是修改名字的，随便填。"></a>这个就是修改名字的，随便填。</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181754003.png"></p><h2 id="填完之后点击下一步"><a href="#填完之后点击下一步" class="headerlink" title="填完之后点击下一步"></a>填完之后点击下一步</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181754551.png"><br><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181755009.png"><br><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181755918.png"></p><h2 id="只需要填写这两个参数，其他的不要动"><a href="#只需要填写这两个参数，其他的不要动" class="headerlink" title="只需要填写这两个参数，其他的不要动"></a>只需要填写这两个参数，其他的不要动</h2><h2 id="按我这个图片的顺序填，填完之后点击创建，就右上角的箭头"><a href="#按我这个图片的顺序填，填完之后点击创建，就右上角的箭头" class="headerlink" title="按我这个图片的顺序填，填完之后点击创建，就右上角的箭头"></a>按我这个图片的顺序填，填完之后点击创建，就右上角的箭头</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181755719.png"></p><h2 id="完成创建之后，开启抓包，回到QQ-开启那个夜间模式，就可以了"><a href="#完成创建之后，开启抓包，回到QQ-开启那个夜间模式，就可以了" class="headerlink" title="完成创建之后，开启抓包，回到QQ,开启那个夜间模式，就可以了"></a>完成创建之后，开启抓包，回到QQ,开启那个夜间模式，就可以了</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181755527.png"><br><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181755871.png"></p><h1 id="完"><a href="#完" class="headerlink" title="完 !!!"></a>完 !!!</h1>]]></content>
    
    
    
    <tags>
      
      <tag>技巧</tag>
      
      <tag>QQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Coding图床方案</title>
    <link href="/2022/04/09/Coding%E5%9B%BE%E5%BA%8A%E6%96%B9%E6%A1%88/"/>
    <url>/2022/04/09/Coding%E5%9B%BE%E5%BA%8A%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文由 wuBenefit 用户转载，版权归原作者所有。</p><p>本文作者：暮雨千泷<br>原文地址：<a href="https://www.myql.xyz/post/92e90c46/">https://www.myql.xyz/post/92e90c46/</a></p></blockquote><p>现在绝大多数自建博客用的图床方案都是 GitHub + jsDelivr + PicGo，包括作者的站点也是一样，优点在于零成本，简单的搭建方式以及不错的访问速度，但随着 jsDelivr 备案被取消，国内访问不再稳定，我开始考虑更好的代替品。</p><p>之前其实也试过 Coding 或 Gitee 作为自建图床，但是体验都不是特别完美，Coding 图床支持的软件太少了，不管是管理还是上传都并不是很方便，而 Gitee 图床超过 1M 就必须登录才能查看，之前试过使用类似于 <a href="https://github.com/marketplace/actions/sync-repo-to-coding">Sync Repo to Coding</a> 将同步到 Coding，但是效果不太理想。</p><h2 id="🤔-思路"><a href="#🤔-思路" class="headerlink" title="🤔 思路"></a>🤔 思路</h2><p>通过 Coding 持续集成自动将 GitHub 仓库实时同步到 Coding 仓库，并且替换 <code>PicGo</code> 中自定义网址。</p><blockquote><p>相同方法适用于 Gitee，不过更建议使用 Coding。</p></blockquote><h2 id="🧐-优势"><a href="#🧐-优势" class="headerlink" title="🧐 优势"></a>🧐 优势</h2><p>Coding 每月 1000 分钟，单任务 30 分钟，并且不限次数，仅用来同步完全够用，并且构建速度极快，每次构建 7~8 秒左右，通过 PicGo 上传图片后几乎感觉不到太大的延迟就可以显示出图片。</p><p>相比于直接使用 Coding 或 Gitee 当图床的优势在于：</p><ul><li>支持的软件和项目变多</li><li>可以通过 vscode 等一键替换已有链接，达成无感迁移</li><li>不改变原有基于 GitHub + jsDelivr + PicGo 方案的使用方式</li><li>可以搭配类似于 <a href="https://github.com/apps/imgbot">Imgbot</a> 或 <a href="https://github.com/namoscato/action-tinify">action-tinify</a> 完成图片的<strong>自动压缩优化</strong></li><li>管理方面可以使用 <a href="https://github.com/XPoet/picx">picx</a> 或 <a href="https://github.com/xjh22222228/boomb">boomb</a> 类似的项目进行在线管理</li></ul><h2 id="🪛-需要的准备"><a href="#🪛-需要的准备" class="headerlink" title="🪛 需要的准备"></a>🪛 需要的准备</h2><ul><li>GitHub 账号</li><li>Coding 账号</li><li>VScode &#x2F; Typora</li><li><a href="https://github.com/Molunerfinn/PicGo">PicGo</a> &#x2F; <a href="https://marketplace.visualstudio.com/items?itemName=Spades.vs-picgo">vs-picgo</a> &#x2F; <a href="https://marketplace.visualstudio.com/items?itemName=hancel.markdown-image">Markdown Image</a></li></ul><h2 id="🛠️-部署"><a href="#🛠️-部署" class="headerlink" title="🛠️ 部署"></a>🛠️ 部署</h2><p>打开 <a href="https://e.coding.net/login">Coding</a> 后创建一个项目。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-16-35-57.png"></p><p>选择按需选择，勾选<code>代码托管</code>和<code>构建流水线&amp;自动化测试</code>完成创建。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-17-00-37.png"></p><p>进入项目后先创建项目令牌，记录下用户名和密码备用。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-17-03-48.png"></p><p>接下来导入 GitHub 中你选择当图床的仓库。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-16-54-24.png"></p><p>完成后点击<code>持续集成</code>选择<code>构建计划</code>划到最下方选择自定义构建过程，代码仓库选择<code>GitHub</code>选择你刚刚导入的仓库。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-17-18-30.png"></p><p>点击<code>确定</code>后会自动跳转到配置流程，点击<code>文本编辑器</code> 输入以下代码，记得替换成自己的 Coding 仓库 Url：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pipeline &#123;<br>  agent any<br>  stages &#123;<br>    <span class="hljs-title function_">stage</span>(<span class="hljs-params"><span class="hljs-string">&quot;检出&quot;</span></span>) &#123;<br>      steps &#123;<br>        <span class="hljs-title function_">checkout</span>([<br>          <span class="hljs-attr">$class</span>: <span class="hljs-string">&#x27;GitSCM&#x27;</span>,<br>          <span class="hljs-attr">branches</span>: [[<span class="hljs-attr">name</span>: <span class="hljs-variable constant_">GIT_BUILD_REF</span>]],<br>          <span class="hljs-attr">userRemoteConfigs</span>: [[<br>            <span class="hljs-attr">url</span>: <span class="hljs-variable constant_">GIT_REPO_URL</span>,<br>            <span class="hljs-attr">credentialsId</span>: <span class="hljs-variable constant_">CREDENTIALS_ID</span><br>        ]]])<br>      &#125;<br>    &#125;<br>    <span class="hljs-title function_">stage</span>(<span class="hljs-params"><span class="hljs-string">&#x27;拉取到Coding&#x27;</span></span>) &#123;<br>      steps &#123;<br>        echo <span class="hljs-string">&quot;正在拉取&quot;</span><br>        sh <span class="hljs-string">&#x27;git push -f https://$CODING_NAME:$CODING_TOKEN@e.coding.net/你的团队名/项目名称/代码仓库名称.git HEAD:main&#x27;</span><br>        echo <span class="hljs-string">&quot;拉取完成&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-17-31-41.png"></p><p>在环境变量里输入<code>CODING_NAME</code>和<code>CODING_TOKEN</code>值就是刚刚申请的项目令牌的用户名和密码，完成后记得保存。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-17-41-09.png"></p><p>在<code>触发规则</code>里修改触发方式为推送到<code>main</code>分支时触发，并且将手动触发改为<code>main</code>（可根据自己实际需求选择）。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-17-46-15.png"></p><p>完成后点击<code>立即构建</code>, 从现在起，你在 GitHub 上的仓库会自动同步到 Coding 仓库上，到此部署结束。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-19-02-15.png"></p><h2 id="🚀-实际使用"><a href="#🚀-实际使用" class="headerlink" title="🚀 实际使用"></a>🚀 实际使用</h2><p>开打 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a> &#x2F; <a href="https://marketplace.visualstudio.com/items?itemName=Spades.vs-picgo">vs-picgo</a> &#x2F; <a href="https://marketplace.visualstudio.com/items?itemName=hancel.markdown-image">Markdown Image</a> 中的任意一个，配置GitHub图床，将自定义网址替换为：<br><code>https://你的团队名.coding.net/p/你的项目名称/d/你的代码仓库名称/git/raw/main</code>。</p><p>以 <a href="https://marketplace.visualstudio.com/items?itemName=Spades.vs-picgo">vs-picgo</a> 为例：</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-18-07-36.png"></p><p>现在直接使用快捷键上传图像，图片会自动将 GitHub 的链接替换为 Coding 的链接，请开始愉快的写作吧！</p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>图床</tag>
      
      <tag>Coding</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

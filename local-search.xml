<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Padavan老毛子固件安装阿里云webdav服务 aliyundrive-webdav安装教程</title>
    <link href="/2022/06/09/Padavan%E8%80%81%E6%AF%9B%E5%AD%90%E5%9B%BA%E4%BB%B6%E5%AE%89%E8%A3%85%E9%98%BF%E9%87%8C%E4%BA%91webdav%E6%9C%8D%E5%8A%A1-aliyundrive-webdav%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2022/06/09/Padavan%E8%80%81%E6%AF%9B%E5%AD%90%E5%9B%BA%E4%BB%B6%E5%AE%89%E8%A3%85%E9%98%BF%E9%87%8C%E4%BA%91webdav%E6%9C%8D%E5%8A%A1-aliyundrive-webdav%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文作者： duomingxing<br>本文原地址： <a href="https://www.mydigit.cn/thread-313042-1-1.html">https://www.mydigit.cn/thread-313042-1-1.html</a></p></blockquote><h3 id="感谢原作者大大"><a href="#感谢原作者大大" class="headerlink" title="感谢原作者大大"></a><font color="#FF0000">感谢原作者大大</font></h3><h3 id="阿里云盘-WebDAV-服务，主要使用场景为配合支持-WebDAV-协议的客户端-App-如-Infuse、nPlayer-等实现在电视上直接观看云盘视频内容，安装方法也非常简单！"><a href="#阿里云盘-WebDAV-服务，主要使用场景为配合支持-WebDAV-协议的客户端-App-如-Infuse、nPlayer-等实现在电视上直接观看云盘视频内容，安装方法也非常简单！" class="headerlink" title="阿里云盘 WebDAV 服务，主要使用场景为配合支持 WebDAV 协议的客户端 App 如 Infuse、nPlayer 等实现在电视上直接观看云盘视频内容，安装方法也非常简单！"></a>阿里云盘 WebDAV 服务，主要使用场景为配合支持 WebDAV 协议的客户端 App 如 Infuse、nPlayer 等实现在电视上直接观看云盘视频内容，安装方法也非常简单！</h3><h3 id="目前测试过HIBOY大神的PDCN的16M固件可以用，8M固件和我自己编译的老毛子固件缺少依赖无法运行，其他版本的老毛子固件请自行测试！-（我这测试了8M的固件，C大的。自己编译的）"><a href="#目前测试过HIBOY大神的PDCN的16M固件可以用，8M固件和我自己编译的老毛子固件缺少依赖无法运行，其他版本的老毛子固件请自行测试！-（我这测试了8M的固件，C大的。自己编译的）" class="headerlink" title="目前测试过HIBOY大神的PDCN的16M固件可以用，8M固件和我自己编译的老毛子固件缺少依赖无法运行，其他版本的老毛子固件请自行测试！ （我这测试了8M的固件，C大的。自己编译的）"></a>目前测试过HIBOY大神的PDCN的16M固件可以用，8M固件和我自己编译的老毛子固件缺少依赖无法运行，其他版本的老毛子固件请自行测试！ （我这测试了8M的固件，C大的。自己编译的）</h3><h3 id="温馨提示：只建议在MT7621AT路由器上安装，MT7620-x2F-MT7628这类路由器就不建议了，毕竟这个插件还是非常吃CPU的，当然，如果你只是为了捣鼓下，试试也无可厚非。只看图片，不看文字介绍，注定你要吃大亏！！！"><a href="#温馨提示：只建议在MT7621AT路由器上安装，MT7620-x2F-MT7628这类路由器就不建议了，毕竟这个插件还是非常吃CPU的，当然，如果你只是为了捣鼓下，试试也无可厚非。只看图片，不看文字介绍，注定你要吃大亏！！！" class="headerlink" title="温馨提示：只建议在MT7621AT路由器上安装，MT7620&#x2F;MT7628这类路由器就不建议了，毕竟这个插件还是非常吃CPU的，当然，如果你只是为了捣鼓下，试试也无可厚非。只看图片，不看文字介绍，注定你要吃大亏！！！"></a>温馨提示：只建议在MT7621AT路由器上安装，MT7620&#x2F;MT7628这类路由器就不建议了，毕竟这个插件还是非常吃CPU的，当然，如果你只是为了捣鼓下，试试也无可厚非。<font color=#000000 ><strong>只看图片，不看文字介绍，注定你要吃大亏！！！</strong></font></h3><p><a href="https://github.com/messense/aliyundrive-webdav">项目地址：https://github.com/messense/aliyundrive-webdav</a></p><p><font color="#FF0000">准备工作</font>务必先获取refreshToken参数，再进行后面的操作，否则将无法正常运行！</p><ol><li><a href="https://media.cooluc.com/decode_token/%E5%9C%A8%E6%AD%A4%E7%BD%91%E9%A1%B5%E8%BF%9B%E8%A1%8C%E8%8E%B7%E5%8F%96,%E4%BD%86%E6%98%AF%E6%88%91%E5%9C%A8%E6%90%AD%E5%BB%BA%E7%9A%84%E6%97%B6%E5%80%99%E6%8A%A5%E9%94%99,%E5%A6%82%E6%9E%9C%E6%8A%A5%E9%94%99%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%96%B9%E6%B3%95">https://media.cooluc.com/decode_token/在此网页进行获取,但是我在搭建的时候报错,如果报错可以使用第二种方法</a></li><li><a href="https://www.aliyundrive.com/sign/">https://www.aliyundrive.com/sign/</a> 登录网页版 按f12打开控制台—application—local storage—token，即可查看refresh token</li></ol><h3 id="这是原作者教的，我教一种更简单的"><a href="#这是原作者教的，我教一种更简单的" class="headerlink" title="这是原作者教的，我教一种更简单的"></a>这是原作者教的，我教一种更简单的</h3><h5 id="打开-https-www-aliyundrive-com-drive-网页。按f12打开控制台-输出-JSON-parse-localStorage-token-refresh-token-这个语句-这个会输出你的-token-就行了"><a href="#打开-https-www-aliyundrive-com-drive-网页。按f12打开控制台-输出-JSON-parse-localStorage-token-refresh-token-这个语句-这个会输出你的-token-就行了" class="headerlink" title="打开 https://www.aliyundrive.com/drive  网页。按f12打开控制台 输出 JSON.parse(localStorage.token).refresh_token 这个语句 这个会输出你的 token 就行了"></a>打开 <a href="https://www.aliyundrive.com/drive">https://www.aliyundrive.com/drive</a>  网页。按f12打开控制台 输出 JSON.parse(localStorage.token).refresh_token 这个语句 这个会输出你的 token 就行了</h5><p><img src="https://img.mydigit.cn/forum/202205/17/011814gi166j01giuiuo6j.jpg" alt="按这上面填。token 记得换掉"></p><h3 id="把下面的配置参数，复制到“自定义设置”——“脚本”——“在防火墙规则启用后执行”"><a href="#把下面的配置参数，复制到“自定义设置”——“脚本”——“在防火墙规则启用后执行”" class="headerlink" title="把下面的配置参数，复制到“自定义设置”——“脚本”——“在防火墙规则启用后执行”"></a>把下面的配置参数，复制到“自定义设置”——“脚本”——“在防火墙规则启用后执行”</h3><h3 id="这里有一点要再啰嗦下，一定要先获取-refresh-token-参数，然后把你自己的-refresh-token-参数，替换进去，再点保存应用！！"><a href="#这里有一点要再啰嗦下，一定要先获取-refresh-token-参数，然后把你自己的-refresh-token-参数，替换进去，再点保存应用！！" class="headerlink" title="这里有一点要再啰嗦下，一定要先获取 refresh_token 参数，然后把你自己的 refresh_token 参数，替换进去，再点保存应用！！"></a>这里有一点要再啰嗦下，一定要先获取 refresh_token 参数，然后把你自己的 refresh_token 参数，替换进去，再点保存应用！！</h3><blockquote><p>#阿里云盘WebDAV配置参数<br>ali_enable&#x3D;1<br>ali_refresh_token&#x3D;569ba0889fde4245b48560b9d5bc19d7<br>ali_host&#x3D;0.0.0.0<br>ali_port&#x3D;8777<br>ali_read_buffer_size&#x3D;10485760<br>ali_cache_size&#x3D;1000<br>ali_cache_ttl&#x3D;600<br>ali_root&#x3D;&#x2F;<br>ali_read_only&#x3D;0</p></blockquote><h3 id="上面的参数说明："><a href="#上面的参数说明：" class="headerlink" title="上面的参数说明："></a>上面的参数说明：</h3><ul><li>ali_enable，是开关项，1为开，0为关；</li><li>ali_refresh_token，这个参数是refresh_token，最主要，也是最难获取的。</li><li>ali_host，绑定的IP地址，可以是路由器的内网IP也可以是WAN口的IP，一般默认即可 (默认就是你的路由器地址)</li><li>ali_port，webdav访问端口号，可以使用任何一个没有被占用的端口号，不能跟其他已用端口号重。</li><li>webdav的登录账号密码为你路由器的管理账号密码，其他参数不在介绍，可以去项目地址观看官方说明。</li></ul><h3 id="第二步》》"><a href="#第二步》》" class="headerlink" title="第二步》》"></a>第二步》》</h3><h3 id="在保证路由器联网的情况下，登录路由器的SSH或者TELNET，复制下面的代码，按回车键即可一键安装，并且支持开机自启动"><a href="#在保证路由器联网的情况下，登录路由器的SSH或者TELNET，复制下面的代码，按回车键即可一键安装，并且支持开机自启动" class="headerlink" title="在保证路由器联网的情况下，登录路由器的SSH或者TELNET，复制下面的代码，按回车键即可一键安装，并且支持开机自启动"></a>在保证路由器联网的情况下，登录路由器的SSH或者TELNET，复制下面的代码，按回车键即可一键安装，并且支持开机自启动</h3><h3 id="安装教程以闪存版为例，内存版在日志中的提示稍有不同"><a href="#安装教程以闪存版为例，内存版在日志中的提示稍有不同" class="headerlink" title="安装教程以闪存版为例，内存版在日志中的提示稍有不同"></a>安装教程以闪存版为例，内存版在日志中的提示稍有不同</h3><p><img src="https://img.mydigit.cn/forum/202205/17/011825cgd71lt12lg7p19d.jpg" alt="安装"></p><p><font color="#ff0000">安装代码说明，分为两种，一种是用在像新路由D1&#x2F;D2，歌华链，中兴E8820S等32M&#x2F;128M闪存的MT7621路由器中（我这里定义为闪存版），另一种是用在16M闪存的MT7621AT路由器中，比如斐讯K2P（我这里定义为内存版），经过多多的测试，这个插件对内存要求不高，128M缓存的路由器足够，只对CPU性能要求高。</font></p><h3 id="闪存版："><a href="#闪存版：" class="headerlink" title="闪存版："></a>闪存版：</h3><pre><code class="hljs">&gt; cd /tmp &amp;&amp; wget http://app.nihaodd.com/script/free/aliyundrive-webdav-rom -O aliyundrive-webdav &amp;&amp; chmod +x aliyundrive-webdav &amp;&amp; ./aliyundrive-webdav install</code></pre><h3 id="内存版"><a href="#内存版" class="headerlink" title="内存版"></a>内存版</h3><pre><code class="hljs">&gt; cd /tmp &amp;&amp; wget http://app.nihaodd.com/script/free/aliyundrive-webdav-ram -O aliyundrive-webdav &amp;&amp; chmod +x aliyundrive-webdav &amp;&amp; ./aliyundrive-webdav install</code></pre><h3 id="闪存版安装时间大约需要3-5分钟，内存版1-2两分钟。"><a href="#闪存版安装时间大约需要3-5分钟，内存版1-2两分钟。" class="headerlink" title="闪存版安装时间大约需要3-5分钟，内存版1-2两分钟。"></a>闪存版安装时间大约需要3-5分钟，内存版1-2两分钟。</h3><h3 id="第三步》》"><a href="#第三步》》" class="headerlink" title="第三步》》"></a>第三步》》</h3><h4 id="执行完以上代码，打开Padava系统右上角查看系统日志，如果看到”闪存版：【阿里云WebDAV】文件储存完成-x2F-内存版：【阿里云WebDAV】aliyundrive-webdav已运行“，说明安装完成，如下图所示："><a href="#执行完以上代码，打开Padava系统右上角查看系统日志，如果看到”闪存版：【阿里云WebDAV】文件储存完成-x2F-内存版：【阿里云WebDAV】aliyundrive-webdav已运行“，说明安装完成，如下图所示：" class="headerlink" title="执行完以上代码，打开Padava系统右上角查看系统日志，如果看到”闪存版：【阿里云WebDAV】文件储存完成 &#x2F; 内存版：【阿里云WebDAV】aliyundrive-webdav已运行“，说明安装完成，如下图所示："></a>执行完以上代码，打开Padava系统右上角查看系统日志，如果看到”闪存版：【阿里云WebDAV】文件储存完成 &#x2F; 内存版：【阿里云WebDAV】aliyundrive-webdav已运行“，说明安装完成，如下图所示：</h4><p><img src="https://img.mydigit.cn/forum/202205/17/011849kl5sz5lllstlunzu.jpg" alt="安装完成"></p><p><img src="https://img.mydigit.cn/forum/202205/17/011850eqrqftag2bhwqw6b.jpg" alt="访问界面"></p><p><img src="https://img.mydigit.cn/forum/202205/17/011850fwxbbkoigbbzfaob.jpg" alt="访问界面"></p><h3 id="安装好的最终使用场景，可不是就直接这样在浏览器上访问，而是在电视上通过支持webdav协议的播放器来播放云盘里面的高清视频资料，比如-nplayer，kodi，potplayer等这些app都可以支持电视端。具体如何在app里面添加webdav协议，请度娘或者自行研究。"><a href="#安装好的最终使用场景，可不是就直接这样在浏览器上访问，而是在电视上通过支持webdav协议的播放器来播放云盘里面的高清视频资料，比如-nplayer，kodi，potplayer等这些app都可以支持电视端。具体如何在app里面添加webdav协议，请度娘或者自行研究。" class="headerlink" title="安装好的最终使用场景，可不是就直接这样在浏览器上访问，而是在电视上通过支持webdav协议的播放器来播放云盘里面的高清视频资料，比如 nplayer，kodi，potplayer等这些app都可以支持电视端。具体如何在app里面添加webdav协议，请度娘或者自行研究。"></a><font color="#0000FF">安装好的最终使用场景，可不是就直接这样在浏览器上访问，而是在电视上通过支持webdav协议的播放器来播放云盘里面的高清视频资料，比如 nplayer，kodi，potplayer等这些app都可以支持电视端。具体如何在app里面添加webdav协议，请度娘或者自行研究。</font></h3>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>技巧</tag>
      
      <tag>路由器</tag>
      
      <tag>阿里云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>白嫖Google无限空间</title>
    <link href="/2022/06/07/%E7%99%BD%E5%AB%96Google%E6%97%A0%E9%99%90%E7%A9%BA%E9%97%B4/"/>
    <url>/2022/06/07/%E7%99%BD%E5%AB%96Google%E6%97%A0%E9%99%90%E7%A9%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h3 id="Google-硬盘以前是无限空间的，后面被人嫖怕了，就改成了15G空间，今天就教大家一种嫖无限空间的办法"><a href="#Google-硬盘以前是无限空间的，后面被人嫖怕了，就改成了15G空间，今天就教大家一种嫖无限空间的办法" class="headerlink" title="Google 硬盘以前是无限空间的，后面被人嫖怕了，就改成了15G空间，今天就教大家一种嫖无限空间的办法"></a>Google 硬盘以前是无限空间的，后面被人嫖怕了，就改成了15G空间，今天就教大家一种嫖无限空间的办法</h3><ol><li>打开你的浏览器登陆Google云端硬盘</li><li>新窗口登录 <a href="https://td.msgsuite.workers.dev/">https://td.msgsuite.workers.dev</a></li><li>同意条款。输入共享盘名称和gmail，学校默认即可</li><li>验证，然后创建。提示成功即可，不成功换学校换随机吧。我就是这样滴</li><li>刷新谷歌云端硬盘页面，会出现“共享云端硬盘”，这个共享盘就是无限空间的！</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wubenefit/img/202206080018382.jpg" alt="创建成功"></p><h2 id="这个创建的共享网盘就不要放那些珍贵的数据了。不知道他什么时候删除"><a href="#这个创建的共享网盘就不要放那些珍贵的数据了。不知道他什么时候删除" class="headerlink" title="这个创建的共享网盘就不要放那些珍贵的数据了。不知道他什么时候删除"></a>这个创建的共享网盘就不要放那些珍贵的数据了。不知道他什么时候删除</h2>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>空间</tag>
      
      <tag>Google</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Padavan通过socat实现公网ipv6转发内网ipv4</title>
    <link href="/2022/05/18/Padavan%E9%80%9A%E8%BF%87socat%E5%AE%9E%E7%8E%B0%E5%85%AC%E7%BD%91ipv6%E8%BD%AC%E5%8F%91%E5%86%85%E7%BD%91ipv4/"/>
    <url>/2022/05/18/Padavan%E9%80%9A%E8%BF%87socat%E5%AE%9E%E7%8E%B0%E5%85%AC%E7%BD%91ipv6%E8%BD%AC%E5%8F%91%E5%86%85%E7%BD%91ipv4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文作者：Seeker<br>原文地址：<a href="http://www.yizu.org/archives/786/">http://www.yizu.org/archives/786/</a></p></blockquote><h5 id="在没有公网IP的情况下，我们会采用内网穿透的方式访问内网，比如frp，但是这种方式需要一台公网服务器，而且速度受到这台服务器带宽的限制，体验可能很一般。但是如果我们有公网ipv6地址，就可直接访问家里设备了。如果你的路由器有IPv6地址，而内网设备因为种种原因没有IPv6，但需要公网访问，可以使用socat来进行转发"><a href="#在没有公网IP的情况下，我们会采用内网穿透的方式访问内网，比如frp，但是这种方式需要一台公网服务器，而且速度受到这台服务器带宽的限制，体验可能很一般。但是如果我们有公网ipv6地址，就可直接访问家里设备了。如果你的路由器有IPv6地址，而内网设备因为种种原因没有IPv6，但需要公网访问，可以使用socat来进行转发" class="headerlink" title="在没有公网IP的情况下，我们会采用内网穿透的方式访问内网，比如frp，但是这种方式需要一台公网服务器，而且速度受到这台服务器带宽的限制，体验可能很一般。但是如果我们有公网ipv6地址，就可直接访问家里设备了。如果你的路由器有IPv6地址，而内网设备因为种种原因没有IPv6，但需要公网访问，可以使用socat来进行转发"></a>在没有公网IP的情况下，我们会采用内网穿透的方式访问内网，比如frp，但是这种方式需要一台公网服务器，而且速度受到这台服务器带宽的限制，体验可能很一般。但是如果我们有公网ipv6地址，就可直接访问家里设备了。如果你的路由器有IPv6地址，而内网设备因为种种原因没有IPv6，但需要公网访问，可以使用socat来进行转发</h5><p>这里介绍Padavan下的配置，openwrt系统类似。<br>首先通过socat -h命令看一下你的路由器有没有安装socat,如果没有安装则先安装socat</p><blockquote><p>opkg update<br>opkg install socat</p></blockquote><h5 id="在“高级设置”-“参数设置”-“脚本”找到“在防火墙规则启动后执行-”，输入以下脚本"><a href="#在“高级设置”-“参数设置”-“脚本”找到“在防火墙规则启动后执行-”，输入以下脚本" class="headerlink" title="在“高级设置”-“参数设置”-“脚本”找到“在防火墙规则启动后执行:”，输入以下脚本"></a>在“高级设置”-“参数设置”-“脚本”找到“在防火墙规则启动后执行:”，输入以下脚本</h5><blockquote><p>#设置防火墙，开放3322端口<br>ip6tables -A INPUT -p tcp –dport 3322 -j ACCEPT<br>ip6tables -A OUTPUT -p tcp –dport 3322 -j ACCEPT<br>ip6tables -A INPUT -p udp –dport 3322 -j ACCEPT<br>ip6tables -A OUTPUT -p udp –dport 3322 -j ACCEPT<br>#设置socat<br>nohup socat TCP6-LISTEN:3322,reuseaddr,fork TCP4:192.168.1.2:22 &amp;<br>nohup socat UDP6-LISTEN:3322,reuseaddr,fork UDP4:192.168.1.2:22 &amp;</p></blockquote><h5 id="应用设置后即可。这段代码可以实现通过访问“-路由器ipv6地址-3322”-达到公网访问“192-168-1-2-22”的目的"><a href="#应用设置后即可。这段代码可以实现通过访问“-路由器ipv6地址-3322”-达到公网访问“192-168-1-2-22”的目的" class="headerlink" title="应用设置后即可。这段代码可以实现通过访问“[路由器ipv6地址]:3322”,达到公网访问“192.168.1.2:22”的目的"></a>应用设置后即可。这段代码可以实现通过访问“[路由器ipv6地址]:3322”,达到公网访问“192.168.1.2:22”的目的</h5>]]></content>
    
    
    
    <tags>
      
      <tag>技巧</tag>
      
      <tag>公网</tag>
      
      <tag>路由器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/18/hello-world/"/>
    <url>/2022/05/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>功能增强</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>QQ切换深色主题</title>
    <link href="/2022/04/18/QQ%E5%88%87%E6%8D%A2%E6%B7%B1%E8%89%B2%E4%B8%BB%E9%A2%98/"/>
    <url>/2022/04/18/QQ%E5%88%87%E6%8D%A2%E6%B7%B1%E8%89%B2%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="🧐-QQ不能切换到深色模式，我一直在网上找资料，然后找到了这位-杠就拉黑-之后我手机是Android12版本的，不能使用。我就在酷安上面寻找可以使用在Android12的-httpcanary-软件，之后找到这位的-我无聊了-的文件。"><a href="#🧐-QQ不能切换到深色模式，我一直在网上找资料，然后找到了这位-杠就拉黑-之后我手机是Android12版本的，不能使用。我就在酷安上面寻找可以使用在Android12的-httpcanary-软件，之后找到这位的-我无聊了-的文件。" class="headerlink" title="🧐 QQ不能切换到深色模式，我一直在网上找资料，然后找到了这位 杠就拉黑  之后我手机是Android12版本的，不能使用。我就在酷安上面寻找可以使用在Android12的 httpcanary 软件，之后找到这位的 我无聊了 的文件。"></a>🧐 QQ不能切换到深色模式，我一直在网上找资料，然后找到了这位 <a href="https://www.coolapk.com/feed/32946253?shareKey=YzJkZTA1NTFkNGE2NjI1ZDIxMzc">杠就拉黑</a>  之后我手机是Android12版本的，不能使用。我就在酷安上面寻找可以使用在Android12的 <code>httpcanary</code> 软件，之后找到这位的 <a href="https://www.coolapk.com/feed/34705000?shareKey=ZDIwYWRkZjBlZDc1NjI1ZDIxNTg">我无聊了</a> 的文件。</h2><h2 id="你们可以从他们两位那里下载，也可以到我这里下载-文件-密码是：9utz"><a href="#你们可以从他们两位那里下载，也可以到我这里下载-文件-密码是：9utz" class="headerlink" title="你们可以从他们两位那里下载，也可以到我这里下载 文件  密码是：9utz"></a>你们可以从他们两位那里下载，也可以到我这里下载 <a href="https://wwc.lanzouh.com/b036wy7fi">文件</a>  密码是：9utz</h2><h2 id="我的QQ版本是Play8-2-11版本的。应该是可以通用的。"><a href="#我的QQ版本是Play8-2-11版本的。应该是可以通用的。" class="headerlink" title="我的QQ版本是Play8.2.11版本的。应该是可以通用的。"></a>我的QQ版本是Play8.2.11版本的。应该是可以通用的。</h2><h1 id="🛠️-操作步骤"><a href="#🛠️-操作步骤" class="headerlink" title="🛠️ 操作步骤"></a>🛠️ 操作步骤</h1><h2 id="httpcanary配置为目标应用QQ"><a href="#httpcanary配置为目标应用QQ" class="headerlink" title="httpcanary配置为目标应用QQ"></a>httpcanary配置为目标应用QQ</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181806572.png"><br><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181806115.png"></p><h2 id="打开QQ"><a href="#打开QQ" class="headerlink" title="打开QQ"></a>打开QQ</h2><h2 id="进入httpcanary里面"><a href="#进入httpcanary里面" class="headerlink" title="进入httpcanary里面"></a>进入httpcanary里面</h2><h2 id="然后启动抓包"><a href="#然后启动抓包" class="headerlink" title="然后启动抓包"></a>然后启动抓包</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181749630.png"></p><h2 id="然后点击抓到的那个链接"><a href="#然后点击抓到的那个链接" class="headerlink" title="然后点击抓到的那个链接"></a>然后点击抓到的那个链接</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181751940.png"></p><h2 id="然后复制那个地址到浏览器下载，随便那个浏览器都行"><a href="#然后复制那个地址到浏览器下载，随便那个浏览器都行" class="headerlink" title="然后复制那个地址到浏览器下载，随便那个浏览器都行"></a>然后复制那个地址到浏览器下载，随便那个浏览器都行</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181752974.png"></p><h2 id="然后按住抓到那个地址，出现这个界面"><a href="#然后按住抓到那个地址，出现这个界面" class="headerlink" title="然后按住抓到那个地址，出现这个界面"></a>然后按住抓到那个地址，出现这个界面</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181752996.png"></p><h2 id="之后点击那个重写"><a href="#之后点击那个重写" class="headerlink" title="之后点击那个重写"></a>之后点击那个重写</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181753534.png"></p><h2 id="这个就是修改名字的，随便填。"><a href="#这个就是修改名字的，随便填。" class="headerlink" title="这个就是修改名字的，随便填。"></a>这个就是修改名字的，随便填。</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181754003.png"></p><h2 id="填完之后点击下一步"><a href="#填完之后点击下一步" class="headerlink" title="填完之后点击下一步"></a>填完之后点击下一步</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181754551.png"><br><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181755009.png"><br><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181755918.png"></p><h2 id="只需要填写这两个参数，其他的不要动"><a href="#只需要填写这两个参数，其他的不要动" class="headerlink" title="只需要填写这两个参数，其他的不要动"></a>只需要填写这两个参数，其他的不要动</h2><h2 id="按我这个图片的顺序填，填完之后点击创建，就右上角的箭头"><a href="#按我这个图片的顺序填，填完之后点击创建，就右上角的箭头" class="headerlink" title="按我这个图片的顺序填，填完之后点击创建，就右上角的箭头"></a>按我这个图片的顺序填，填完之后点击创建，就右上角的箭头</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181755719.png"></p><h2 id="完成创建之后，开启抓包，回到QQ-开启那个夜间模式，就可以了"><a href="#完成创建之后，开启抓包，回到QQ-开启那个夜间模式，就可以了" class="headerlink" title="完成创建之后，开启抓包，回到QQ,开启那个夜间模式，就可以了"></a>完成创建之后，开启抓包，回到QQ,开启那个夜间模式，就可以了</h2><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181755527.png"><br><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/202204181755871.png"></p><h1 id="完"><a href="#完" class="headerlink" title="完 !!!"></a>完 !!!</h1>]]></content>
    
    
    
    <tags>
      
      <tag>技巧</tag>
      
      <tag>QQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Coding图床方案</title>
    <link href="/2022/04/09/Coding%E5%9B%BE%E5%BA%8A%E6%96%B9%E6%A1%88/"/>
    <url>/2022/04/09/Coding%E5%9B%BE%E5%BA%8A%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文由 wuBenefit 用户转载，版权归原作者所有。</p><p>本文作者：暮雨千泷<br>原文地址：<a href="https://www.myql.xyz/post/92e90c46/">https://www.myql.xyz/post/92e90c46/</a></p></blockquote><p>现在绝大多数自建博客用的图床方案都是 GitHub + jsDelivr + PicGo，包括作者的站点也是一样，优点在于零成本，简单的搭建方式以及不错的访问速度，但随着 jsDelivr 备案被取消，国内访问不再稳定，我开始考虑更好的代替品。</p><p>之前其实也试过 Coding 或 Gitee 作为自建图床，但是体验都不是特别完美，Coding 图床支持的软件太少了，不管是管理还是上传都并不是很方便，而 Gitee 图床超过 1M 就必须登录才能查看，之前试过使用类似于 <a href="https://github.com/marketplace/actions/sync-repo-to-coding">Sync Repo to Coding</a> 将同步到 Coding，但是效果不太理想。</p><h2 id="🤔-思路"><a href="#🤔-思路" class="headerlink" title="🤔 思路"></a>🤔 思路</h2><p>通过 Coding 持续集成自动将 GitHub 仓库实时同步到 Coding 仓库，并且替换 <code>PicGo</code> 中自定义网址。</p><blockquote><p>相同方法适用于 Gitee，不过更建议使用 Coding。</p></blockquote><h2 id="🧐-优势"><a href="#🧐-优势" class="headerlink" title="🧐 优势"></a>🧐 优势</h2><p>Coding 每月 1000 分钟，单任务 30 分钟，并且不限次数，仅用来同步完全够用，并且构建速度极快，每次构建 7~8 秒左右，通过 PicGo 上传图片后几乎感觉不到太大的延迟就可以显示出图片。</p><p>相比于直接使用 Coding 或 Gitee 当图床的优势在于：</p><ul><li>支持的软件和项目变多</li><li>可以通过 vscode 等一键替换已有链接，达成无感迁移</li><li>不改变原有基于 GitHub + jsDelivr + PicGo 方案的使用方式</li><li>可以搭配类似于 <a href="https://github.com/apps/imgbot">Imgbot</a> 或 <a href="https://github.com/namoscato/action-tinify">action-tinify</a> 完成图片的<strong>自动压缩优化</strong></li><li>管理方面可以使用 <a href="https://github.com/XPoet/picx">picx</a> 或 <a href="https://github.com/xjh22222228/boomb">boomb</a> 类似的项目进行在线管理</li></ul><h2 id="🪛-需要的准备"><a href="#🪛-需要的准备" class="headerlink" title="🪛 需要的准备"></a>🪛 需要的准备</h2><ul><li>GitHub 账号</li><li>Coding 账号</li><li>VScode &#x2F; Typora</li><li><a href="https://github.com/Molunerfinn/PicGo">PicGo</a> &#x2F; <a href="https://marketplace.visualstudio.com/items?itemName=Spades.vs-picgo">vs-picgo</a> &#x2F; <a href="https://marketplace.visualstudio.com/items?itemName=hancel.markdown-image">Markdown Image</a></li></ul><h2 id="🛠️-部署"><a href="#🛠️-部署" class="headerlink" title="🛠️ 部署"></a>🛠️ 部署</h2><p>打开 <a href="https://e.coding.net/login">Coding</a> 后创建一个项目。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-16-35-57.png"></p><p>选择按需选择，勾选<code>代码托管</code>和<code>构建流水线&amp;自动化测试</code>完成创建。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-17-00-37.png"></p><p>进入项目后先创建项目令牌，记录下用户名和密码备用。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-17-03-48.png"></p><p>接下来导入 GitHub 中你选择当图床的仓库。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-16-54-24.png"></p><p>完成后点击<code>持续集成</code>选择<code>构建计划</code>划到最下方选择自定义构建过程，代码仓库选择<code>GitHub</code>选择你刚刚导入的仓库。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-17-18-30.png"></p><p>点击<code>确定</code>后会自动跳转到配置流程，点击<code>文本编辑器</code> 输入以下代码，记得替换成自己的 Coding 仓库 Url：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pipeline &#123;<br>  agent any<br>  stages &#123;<br>    <span class="hljs-title function_">stage</span>(<span class="hljs-params"><span class="hljs-string">&quot;检出&quot;</span></span>) &#123;<br>      steps &#123;<br>        <span class="hljs-title function_">checkout</span>([<br>          <span class="hljs-attr">$class</span>: <span class="hljs-string">&#x27;GitSCM&#x27;</span>,<br>          <span class="hljs-attr">branches</span>: [[<span class="hljs-attr">name</span>: <span class="hljs-variable constant_">GIT_BUILD_REF</span>]],<br>          <span class="hljs-attr">userRemoteConfigs</span>: [[<br>            <span class="hljs-attr">url</span>: <span class="hljs-variable constant_">GIT_REPO_URL</span>,<br>            <span class="hljs-attr">credentialsId</span>: <span class="hljs-variable constant_">CREDENTIALS_ID</span><br>        ]]])<br>      &#125;<br>    &#125;<br>    <span class="hljs-title function_">stage</span>(<span class="hljs-params"><span class="hljs-string">&#x27;拉取到Coding&#x27;</span></span>) &#123;<br>      steps &#123;<br>        echo <span class="hljs-string">&quot;正在拉取&quot;</span><br>        sh <span class="hljs-string">&#x27;git push -f https://$CODING_NAME:$CODING_TOKEN@e.coding.net/你的团队名/项目名称/代码仓库名称.git HEAD:main&#x27;</span><br>        echo <span class="hljs-string">&quot;拉取完成&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-17-31-41.png"></p><p>在环境变量里输入<code>CODING_NAME</code>和<code>CODING_TOKEN</code>值就是刚刚申请的项目令牌的用户名和密码，完成后记得保存。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-17-41-09.png"></p><p>在<code>触发规则</code>里修改触发方式为推送到<code>main</code>分支时触发，并且将手动触发改为<code>main</code>（可根据自己实际需求选择）。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-17-46-15.png"></p><p>完成后点击<code>立即构建</code>, 从现在起，你在 GitHub 上的仓库会自动同步到 Coding 仓库上，到此部署结束。</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-19-02-15.png"></p><h2 id="🚀-实际使用"><a href="#🚀-实际使用" class="headerlink" title="🚀 实际使用"></a>🚀 实际使用</h2><p>开打 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a> &#x2F; <a href="https://marketplace.visualstudio.com/items?itemName=Spades.vs-picgo">vs-picgo</a> &#x2F; <a href="https://marketplace.visualstudio.com/items?itemName=hancel.markdown-image">Markdown Image</a> 中的任意一个，配置GitHub图床，将自定义网址替换为：<br><code>https://你的团队名.coding.net/p/你的项目名称/d/你的代码仓库名称/git/raw/main</code>。</p><p>以 <a href="https://marketplace.visualstudio.com/items?itemName=Spades.vs-picgo">vs-picgo</a> 为例：</p><p><img src="https://wub1.coding.net/p/drawing_bed/d/img/git/raw/master/2022-03-12-18-07-36.png"></p><p>现在直接使用快捷键上传图像，图片会自动将 GitHub 的链接替换为 Coding 的链接，请开始愉快的写作吧！</p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>图床</tag>
      
      <tag>Coding</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
